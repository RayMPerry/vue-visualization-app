#+TITLE: Webpack Configurations
#+AUTHOR: Ray Perry
#+EMAIL: rperry@pmmimediagroup.com

* General Settings
EVALUATE THIS BLOCK FIRST. Feel free to change the string literals.
#+BEGIN_SRC emacs-lisp :results output silent
  ;; `environment` takes EXACTLY "development" or "production", based on the tags below. Everything else is ignored.
  (setq environment "development"
        output-dir-with-slash "../"
        unified-config-name (concat output-dir-with-slash "webpack.config.js")
        dev-config-name (concat output-dir-with-slash "webpack.config.dev.js")
        prod-config-name (concat output-dir-with-slash "webpack.config.prod.js"))
#+END_SRC

* Common
#+NAME: config-frontmatter
#+BEGIN_SRC javascript
  // This file is automatically generated by webpack-configurations.org.
  // Anything changed in this file will be overwritten.
#+END_SRC

* Environments
** Development :development:
#+NAME: dev-config
#+BEGIN_SRC javascript :noweb yes :tangle (and (equal (car (org-get-tags-at (point))) environment) dev-config-name)
  <<config-frontmatter>>

  // DEVELOPMENT BUILD

  var path = require('path');
  var webpack = require('webpack');
  var CopyWebpackPlugin = require('copy-webpack-plugin');

  module.exports = {
    entry: './src/app.js',
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            {
              loader: 'css-loader',
              options: {
                importLoaders: 1
              }
            },
            {
              loader: 'postcss-loader',
            }
          ]
        },
        {
          test: /\.vue$/,
          loader: 'vue-loader',
          options: {
            loaders: {
              'js': 'babel-loader',
              'scss': 'vue-style-loader!css-loader!sass-loader',
              'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax',
            }
          }
        },
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          exclude: /node_modules/,
          options: {
            appendTsSuffixTo: [/\.vue$/],
            transpileOnly: true
          }
        },
        {
          test: /\.(png|jpg|gif|svg)$/,
          loader: 'file-loader',
          options: {
            name: '[name].[ext]?[hash]'
          }
        }
      ]
    },
    plugins: [
      new CopyWebpackPlugin([
        { from: './src/*.html', to: './[name].[ext]' },
        { from: './src/**/*.csv', to: './[name].[ext]' },
        { from: './src/**/*.png', to: './[name].[ext]' }
      ])
    ],
    resolve: {
      extensions: ['.ts', '.js', '.vue', '.json'],
      alias: {
        'vue$': 'vue/dist/vue.js'
      }
    },
    output: {
      path: path.resolve(__dirname, './dist'),
      publicPath: '/dist/',
      filename: './bundle.js'
    },
    devServer: {
      historyApiFallback: true,
      noInfo: true
    },
    performance: {
      hints: false
    },
    devtool: '#eval-source-map'
  }
#+END_SRC

** Production :production:
#+NAME: prod-config
#+BEGIN_SRC javascript :noweb yes :tangle (and (equal (car (org-get-tags-at (point))) environment) prod-config-name)
  <<config-frontmatter>>

  // PRODUCTION BUILD

  var path = require('path');
  var webpack = require('webpack');
  var CopyWebpackPlugin = require('copy-webpack-plugin');

  module.exports = {
    entry: './src/app.js',
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            {
              loader: 'css-loader',
              options: {
                importLoaders: 1
              }
            },
            {
              loader: 'postcss-loader',
            }
          ]
        },
        {
          test: /\.vue$/,
          loader: 'vue-loader',
          options: {
            loaders: {
              'js': 'babel-loader',
              'scss': 'vue-style-loader!css-loader!sass-loader',
              'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax',
            }
          }
        },
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          exclude: /node_modules/,
          options: {
            appendTsSuffixTo: [/\.vue$/],
            transpileOnly: true
          }
        },
        {
          test: /\.(png|jpg|gif|svg)$/,
          loader: 'file-loader',
          options: {
            name: '[name].[ext]?[hash]'
          }
        }
      ]
    },
    plugins: [
      new CopyWebpackPlugin([
        { from: './src/*.html', to: './[name].[ext]' },
        { from: './src/**/schedule*.csv', to: './[name].[ext]' }
      ])
    ],
    resolve: {
      extensions: ['.ts', '.js', '.vue', '.json'],
      alias: {
        'vue$': 'vue/dist/vue.js'
      }
    },
    output: {
      path: path.resolve(__dirname, './dist'),
      publicPath: '/dist/',
      filename: './bundle.js'
    },
    devServer: {
      historyApiFallback: true,
      noInfo: true
    },
    performance: {
      hints: false
    },
    devtool: '#eval-source-map'
  }
#+END_SRC

* .babelrc
#+BEGIN_SRC text :tangle ../.babelrc
{
  "presets": ["es2015"],
  "plugins": ["transform-object-rest-spread"]
}
#+END_SRC

* PostCSS
#+BEGIN_SRC javascript :tangle (concat output-dir-with-slash "postcss.config.js")
  module.exports = {
    plugins: [
      require('precss')()
    ]
  }
#+END_SRC
