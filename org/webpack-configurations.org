#+TITLE: Webpack Configurations
#+AUTHOR: Ray Perry
#+EMAIL: rperry@pmmimediagroup.com

* General Settings
#+NAME: general-settings
#+BEGIN_SRC emacs-lisp :results output silent
  ;; Change these values.
  ;; `environment` takes EXACTLY "development". Everything else is production.
  (setq environment "development"
        output-dir-with-slash "../"
        unified-config-name "webpack.config.js"
        dev-config-name "webpack.config.dev.js"
        prod-config-name "webpack.config.prod.js")

  ;; Let these values evaluate.
  (setq is-dev-environment (string= environment "development")
        current-env-file-name (if is-dev-environment dev-config-name prod-config-name)))
#+END_SRC

* Common
Originally, this was going to swap between environments but I decided against it for now.
I'll revisit it later on.

NOTE: I'll have to figure out how to tangle JavaScript into the files. Maybe predicate check on the file name?

#+NAME: common-webpack-config
#+CALL: general-settings()
#+BEGIN_SRC javascript :noweb yes :tangle (concat output-dir-with-slash unified-config-name)
// This file is automatically generated by webpack-configurations.org.
// Anything changed in this file will be overwritten.

<<determine-current-env-config()>>

<<dev-config>>
#+END_SRC

#+NAME: determine-current-env-config
#+BEGIN_SRC emacs-lisp
  (if is-dev-environment "// DEVELOPMENT BUILD" "// PRODUCTION BUILD")
#+END_SRC

* Environments
** Development
#+NAME: dev-config
#+BEGIN_SRC javascript
  var path = require('path');
  var webpack = require('webpack');
  var CopyWebpackPlugin = require('copy-webpack-plugin');

  module.exports = {
    entry: './src/index.js',
    module: {
      rules: [
        {
          test: /\.css$/,
          use: [
            'style-loader',
            {
              loader: 'css-loader',
              options: {
                importLoaders: 1
              }
            },
            {
              loader: 'postcss-loader',
              options: {
                parser: 'postcss-scss',
                plugins: (loader) => [
                  require('precss')
                ]
              }
            }
          ]
        },
        {
          test: /\.vue$/,
          loader: 'vue-loader',
          options: {
            loaders: {
              'scss': 'vue-style-loader!css-loader!sass-loader',
              'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax',
            }
          }
        },
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          exclude: /node_modules/,
          options: {
            appendTsSuffixTo: [/\.vue$/],
          }
        },
        {
          test: /\.(png|jpg|gif|svg)$/,
          loader: 'file-loader',
          options: {
            name: '[name].[ext]?[hash]'
          }
        }
      ]
    },
    plugins: [
      new CopyWebpackPlugin([
        { from: './src/views/*.html', to: './[name].[ext]' }
      ])
    ],
    resolve: {
      extensions: ['.ts', '.js', '.vue', '.json'],
      alias: {
        'vue$': 'vue/dist/vue.js'
      }
    },
    output: {
      path: path.resolve(__dirname, './dist'),
      publicPath: '/dist/',
      filename: './bundle.js'
    },
    devServer: {
      historyApiFallback: true,
      noInfo: true
    },
    performance: {
      hints: false
    },
    devtool: '#eval-source-map'
  }
#+END_SRC

** Production
#+NAME: prod-config
#+BEGIN_SRC javascript
module.exports = {
    entry: "./src/index.ts",
    output: {
        filename: "./bin/bundle.js"
    },
    resolve: {
        // Add '.ts' and '.tsx' as a resolvable extension.
        extensions: ["", ".webpack.js", ".web.js", ".ts", ".tsx", ".js"]
    },
    module: {
        loaders: [
            // all files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'
            { test: /\.tsx?$/, loader: "ts-loader" }
        ]
    }
}
#+END_SRC

* PostCSS
#+BEGIN_SRC javascript :tangle (concat output-dir-with-slash "postcss.config.js")
  module.exports = {
    parser: 'sugarss',
    plugins: {
      'postcss-import': {},
      'postcss-cssnext': {},
      'autoprefixer': {},
      'cssnano': {}
    }
  }
#+END_SRC
