#+TITLE: Node.js and NPM configurations
#+AUTHOR: Ray Perry
#+EMAIL: rperry@pmmimediagroup.com

* Foreword
** On Express vs. Hapi
Personally, I enjoy using Express for small-to-moderate projects. However, if we decide to use more enterprise-level things, we should use Hapi. It's easier to harden (re: security) and is more compartmentalized. 

* Express
** Server configuration
#+BEGIN_SRC javascript :tangle ../server.js
  const express = require('express');
  const app = express();
  const fs = require('fs');
  const path = require('path');
  const bodyParser = require('body-parser');
  const multer = require('multer');

  const year = process.env.YEAR || 2017;

  const scheduleStorage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, `dist/`);
    },
    filename: (req, file, cb) => {
      cb(null, `schedule${year}.csv`);
    }
  });

  const factoidsStorage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, `dist/`);
    },
    filename: (req, file, cb) => {
      cb(null, `factoids${year}.csv`);
    }
  });

  const scheduleUpload = multer({ storage: scheduleStorage }).single('file');
  const factoidsUpload = multer({ storage: factoidsStorage }).single('file');

  const Twit = require('twit');
  const T = new Twit({
  });

  const twitterKeywordsToFollow = [
    '@packagingworld',
    '@Packcentric',
    '@PackagingDr',
    '@packagingtrends',
    '@healthcarepkg',
    '@RaycatRakittra',
    '#packexpo',
    '#hcpexpo'
  ];

  const tweetStream = T.stream('statuses/filter', {
    track: [...twitterKeywordsToFollow]
  });

  const newsfeedFile = path.join(__dirname + `/dist/newsfeed${year}.csv`);
  const scheduleFile = path.join(__dirname + `/dist/schedule${year}.csv`);

  // Port checking and setup.
  let port = process.env.PORT ? process.env.PORT : 6464;
  port = app.set('port', port).get('port');

  const socketServer = require('socket.io')(port + 1);

  const rootRoute = (req, res) => {
    res.sendFile(path.join(__dirname + '/dist/index.html'));
  };

  const newsfeedRoute = (req, res) => {
    res.sendFile(newsfeedFile);
  };

  const scheduleRoute = (req, res) => {
    res.sendFile(scheduleFile);
  };
  

  app.use(bodyParser.urlencoded({ extended: true }));

  const uploadRoute = (req, res) => {
    if (req.file) {
      fs.readFile(req.file.path, (err, data) => {
      let whichFile = (req.file.filename.indexOf('schedule') > -1) ? scheduleFile : newsfeedFile;  
      fs.writeFile(whichFile, data, (err) => {
          console.log(err);
          console.log(`File written to ./${req.file.filename}`);
          res.status(201).send(whichFile);
        }); 
      });
    } else {
      res.status(500).end('File not uploaded.');
    }
  };

  const postServerConfiguration = () => {
    tweetStream.on('tweet', tweet => {
      socketServer.emit('action', {
        type: 'tweet',
        data: tweet
      });
    })
    console.log(`Media Center running on port ${port}!`);
    console.log(`Socket Server running on port ${port + 1}!`);
  };

  // Set up static directories.
  app.use(express.static('dist'));
  app.use(express.static('assets'));

  // Begin assignment.
  app.post('/uploadSchedule', scheduleUpload, uploadRoute);
  app.post('/uploadFactoids', factoidsUpload, uploadRoute);

  app.get('/schedule', scheduleRoute);
  app.get('/newsfeed', newsfeedRoute);
  app.get('*', rootRoute);

  app.listen(port, postServerConfiguration);
#+END_SRC
